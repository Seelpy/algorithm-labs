/*
28. –ù–∞ —Ä–∞–≤–Ω–∏–Ω–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–º–µ–µ—Ç—Å—è —Å–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥ —Å
–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º. –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≥–æ—Ä–æ–¥–æ–≤, –Ω–µ  —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
–¥–æ—Ä–æ–≥–æ–π,  –∏–∑–≤–µ—Å—Ç–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏. –û–∫–∞–∑–∞–ª–æ—Å—å,
—á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ  –ø–∞—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –∏–º–µ—é—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ü—Ä–∏–Ω—è—Ç–æ  —Ä–µ—à–µ–Ω–∏–µ  –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Ä–æ–≥–∏, —Å–≤—è–∑—ã–≤–∞—é—â–∏–µ –Ω–∞–ø—Ä—è–º—É—é
–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ  –≥–æ—Ä–æ–¥–∞, —Ç–∞–∫,  —á—Ç–æ–±—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –ø—É—Ç—å  –º–µ–∂–¥—É  –ª—é–±—ã–º–∏
–¥–≤—É–º—è  –≥–æ—Ä–æ–¥–∞–º–∏, –∞ –æ–±—â–∞—è  –¥–ª–∏–Ω–∞ –Ω–æ–≤—ã—Ö  –¥–æ—Ä–æ–≥ –±—ã–ª–∞  –º–∏–Ω–∏–º–∞–ª—å–Ω–∞.
–ù–∞–π—Ç–∏ —Ç–∞–∫–∏–µ  –¥–æ—Ä–æ–≥–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –æ–±—â—É—é –¥–ª–∏–Ω—É (12).
IDE: CLion
C++ 17
*/

#include <vector>
#include <fstream>
#include <iostream>
#include <queue>
#include <map>
#include <string>

typedef std::pair<int, int> pair;
typedef std::pair<pair, int> connection;
typedef std::vector<connection> list;

void addEdge(std::vector<pair> adj[], connection con) {
    adj[con.first.first].emplace_back(con.first.second, con.second);
    adj[con.first.second].emplace_back(con.first.first, con.second);
}

list prim(std::vector<pair> adj[], int n) {
    std::priority_queue<pair, std::vector<pair>, std::greater<pair> > pq;

    std::vector<int> key(n, INT_MAX);
    std::vector<int> parent(n, -2);
    std::vector<bool> useage(n, false);
    int src = 0;
    pq.emplace(0, src);

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        if (useage[u]) {
            continue;
        }

        useage[u] = true;
        for (auto x: adj[u]) {
            int v = x.first;
            int weight = x.second;
            if (!useage[v] && key[v] > weight) {
                key[v] = weight;
                pq.emplace(key[v], v);
                parent[v] = u;
            }
        }
    }

    list result;

    for (int i = 1; i < n; ++i) {
        connection con;
        con.first.first = parent[i] + 1;
        con.first.second = i + 1;
        con.second = key[i];
        if (con.second  > -1) {
            result.push_back(con);
        }
    }


    return result;
}


int main(int argc, char **argv) {
    std::ifstream in("input.txt");
    std::ofstream out("output.txt");

    std::map<int, int> map;

    int n, ex;
    in >> n >> ex;

    std::vector<pair> adj[n];

    list exist_cons;
    for (int i = 0; i < ex; i++) {
        connection con;
        in >> con.first.first >> con.first.second;
        con.first.first--;
        con.first.second--;
        con.second = -1;
        addEdge(adj, con);
    }
    list cons;
    while (in.peek() != EOF && !in.eof()) {
        connection con;
        in >> con.first.first >> con.first.second >> con.second;
        con.first.first--;
        con.first.second--;
        if (con.first.first < 0) {
            break;
        }
        addEdge(adj, con);
    }

    list min_cons;
    int sum = 0;
    min_cons = prim(adj, n);
    out << "üõ£Ô∏èüöó–î–æ—Ä–æ–≥–∏: \n";
    for (auto con: min_cons) {
        sum += con.second;
        if (con.second > 0) {
            out << con.first.first << "-" << con.first.second << " " << con.second << "\n";
        }
    }
    out << "\n";
    out << "üëç–°—É–º–º–∞: " << sum;
}
