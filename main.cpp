/*
28. –ù–∞ —Ä–∞–≤–Ω–∏–Ω–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–º–µ–µ—Ç—Å—è —Å–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥ —Å
–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º. –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≥–æ—Ä–æ–¥–æ–≤, –Ω–µ  —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
–¥–æ—Ä–æ–≥–æ–π,  –∏–∑–≤–µ—Å—Ç–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏. –û–∫–∞–∑–∞–ª–æ—Å—å,
—á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ  –ø–∞—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –∏–º–µ—é—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ü—Ä–∏–Ω—è—Ç–æ  —Ä–µ—à–µ–Ω–∏–µ  –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Ä–æ–≥–∏, —Å–≤—è–∑—ã–≤–∞—é—â–∏–µ –Ω–∞–ø—Ä—è–º—É—é
–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ  –≥–æ—Ä–æ–¥–∞, —Ç–∞–∫,  —á—Ç–æ–±—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –ø—É—Ç—å  –º–µ–∂–¥—É  –ª—é–±—ã–º–∏
–¥–≤—É–º—è  –≥–æ—Ä–æ–¥–∞–º–∏, –∞ –æ–±—â–∞—è  –¥–ª–∏–Ω–∞ –Ω–æ–≤—ã—Ö  –¥–æ—Ä–æ–≥ –±—ã–ª–∞  –º–∏–Ω–∏–º–∞–ª—å–Ω–∞.
–ù–∞–π—Ç–∏ —Ç–∞–∫–∏–µ  –¥–æ—Ä–æ–≥–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –æ–±—â—É—é –¥–ª–∏–Ω—É (12).
IDE: CLion
C++ 17
*/

#include <vector>
#include <fstream>
#include <iostream>
#include <queue>
#include <map>

typedef std::pair<int, int> pair;
typedef std::pair<pair, int> connection;
typedef std::vector<connection> list;
typedef std::map<int, bool> used;

struct Checker {
private:
    used *use;
public:
    explicit Checker(used *use) {
        this->use = use;
    }
    bool bigger(connection const &x, connection const &y) {
        bool cx = (*use)[x.first.first] || (*use)[x.first.second];
        bool cy = (*use)[y.first.first] || (*use)[y.first.second];
        if (cx && cy || !(cx || cy)) {
            return x.second > y.second;
        }
        if (cy) {
            return true;
        }
        return false;
    }
};

struct Connection {
private:
    Checker *checker;
public :
    connection con;

    Connection(Checker *checker, connection con) {
        this->checker = checker;
        this->con = con;
    }

    friend bool operator<(Connection const &x, Connection const &y) {
        return x.checker->bigger(x.con, y.con);
    }
};

typedef std::priority_queue<Connection> queue;

void prepareUse(list *exist, list *miss, list *result, queue *q, used *use) {
    Checker checker(use);
    for (auto con: *miss) {
        (*use)[con.first.first] = false;
        (*use)[con.first.second] = false;
        auto tmp = Connection(&checker, con);
        (*q).push(tmp);
    }

    for (auto con: *exist) {
        (*use)[con.first.first] = true;
        (*use)[con.first.second] = true;
    }
}

list prim(list *exist, list *miss) {
    used use;
    queue q;
    list result;

    prepareUse(exist, miss, &result, &q, &use);

    if (q.empty()) {
        return result;
    }

    Connection con = q.top();

    if (exist->empty()) {
        use[con.con.first.first] = true;
        use[con.con.first.second] = true;
        result.push_back(con.con);
    }

    while (!q.empty()) {
        con = q.top();
        q.pop();
        if (use[con.con.first.first] && use[con.con.first.second]) {
            continue;
        }
        if (!use[con.con.first.first] && !use[con.con.first.second]) {
            q.push(con);
            continue;
        }

        result.push_back(con.con);
        use[con.con.first.first] = use[con.con.first.second] = true;
    }
    return result;
}

int main(int argc, char **argv) {
    std::ifstream ext("exist.txt");
    std::ifstream nw("new.txt");
    std::ofstream out("output.txt");

    std::map<int, int> map;

    list exist_cons;
    while (ext.peek() != EOF && !ext.eof()) {
        connection conn;
        ext >> conn.first.first >> conn.first.second >> conn.second;
        exist_cons.push_back(conn);
    }
    list cons;
    while (nw.peek() != EOF && !nw.eof()) {
        connection conn;
        nw >> conn.first.first >> conn.first.second >> conn.second;
        cons.push_back(conn);
    }

    list min_cons;
    int sum = 0;
    min_cons = prim(&exist_cons, &cons);
    out << "üõ£Ô∏èüöóWays: \n";
    for (auto con: min_cons) {
        sum += con.second;
        out << con.first.first << " - " << con.first.second << " | " << con.second << "\n";
    }
    out << "\n";
    out << "üëçSum: " << sum;
}
