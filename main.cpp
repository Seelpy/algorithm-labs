/*
28. –ù–∞ —Ä–∞–≤–Ω–∏–Ω–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–º–µ–µ—Ç—Å—è —Å–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥ —Å
–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º. –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≥–æ—Ä–æ–¥–æ–≤, –Ω–µ  —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
–¥–æ—Ä–æ–≥–æ–π,  –∏–∑–≤–µ—Å—Ç–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏. –û–∫–∞–∑–∞–ª–æ—Å—å,
—á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ  –ø–∞—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –∏–º–µ—é—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ü—Ä–∏–Ω—è—Ç–æ  —Ä–µ—à–µ–Ω–∏–µ  –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Ä–æ–≥–∏, —Å–≤—è–∑—ã–≤–∞—é—â–∏–µ –Ω–∞–ø—Ä—è–º—É—é
–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ  –≥–æ—Ä–æ–¥–∞, —Ç–∞–∫,  —á—Ç–æ–±—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –ø—É—Ç—å  –º–µ–∂–¥—É  –ª—é–±—ã–º–∏
–¥–≤—É–º—è  –≥–æ—Ä–æ–¥–∞–º–∏, –∞ –æ–±—â–∞—è  –¥–ª–∏–Ω–∞ –Ω–æ–≤—ã—Ö  –¥–æ—Ä–æ–≥ –±—ã–ª–∞  –º–∏–Ω–∏–º–∞–ª—å–Ω–∞.
–ù–∞–π—Ç–∏ —Ç–∞–∫–∏–µ  –¥–æ—Ä–æ–≥–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –æ–±—â—É—é –¥–ª–∏–Ω—É (12).
IDE: CLion
C++ 17
*/

#include <vector>
#include <fstream>
#include <iostream>
#include <queue>
#include <map>
#include <string>

typedef std::pair<int, int> pair;
typedef std::pair<pair, int> connection;
typedef std::vector<connection> list;
typedef std::map<int, bool> used;
typedef std::map<std::string, bool> builded;
typedef std::map<int, std::vector<connection>> adjacency;
typedef std::map<int, bool> nodes;
typedef std::vector<int> list_index;


std::string generateKey(connection con) {
    return std::to_string(con.first.first) + "-" + std::to_string(con.first.second);
}

void printc(connection con) {
    std::cout<<con.first.first << " " << con.first.second << " " << con.second << "\n";
}

void print(list *l){
    for (auto con: *l) {
        printc(con);
    }
}

bool compare(connection a, connection b, builded *build) {
    if ((*build)[generateKey(b)]) {
        return false;
    }

    if ((*build)[generateKey(a)]) {
        return true;
    }
    return a.second < b.second;
}

bool equal(connection a, connection b) {
    return a.first.first == b.first.first && a.first.second == b.first.second;
}

void prepareUse(list *exist, list *miss, adjacency *adj, builded *build) {
    for (auto con: *miss) {
        (*adj)[con.first.first].push_back(con);
        (*adj)[con.first.second].push_back(con);
    }

    for (auto con: *exist) {
        (*adj)[con.first.first].push_back(con);
        (*adj)[con.first.second].push_back(con);
        (*build)[generateKey(con)] = true;
    }
}



list prim(list *exist, list *miss) {
    used use;
    adjacency adj;
    list result;
    builded build;
    nodes list_nodes;

    prepareUse(exist, miss, &adj, &build);

    connection min_con;
    min_con.second = INT_MAX;
    for (auto con: *exist) {
        if (con.second < min_con.second && !build[generateKey(con)]) {
            min_con = con;
        }
    }
    for (auto con: *miss) {
        if (con.second < min_con.second && !build[generateKey(con)]) {
            min_con = con;
        }
    }
    printc(min_con);
    if (min_con.second == INT_MAX) {
        return result;
    }
    use[min_con.first.first] = true;
    list_nodes[min_con.first.first];

    while (true) {
        connection min_con;
        min_con.second = INT_MAX;
        int min_node;
        for (auto one_node : list_nodes) {
            auto node = one_node.first;
            list_index on_delete;
            list cons = adj[node];
            for (int i = 0; i < cons.size(); i++) {
                auto con = cons[i];
                if (use[con.first.first] && use[con.first.second] && !build[generateKey(con)]) {
                    on_delete.push_back(i);
                    continue;
                }
                if (!use[con.first.first] && !use[con.first.second]) {
                    continue;
                }
                if (compare(con, min_con, &build)) {
                    min_con = con;
                    min_node = node;
                }
            }

            for( auto delete_node: on_delete) {
                cons.erase(cons.begin() + delete_node);
            }
        }

        if (min_con.second == INT_MAX) {
            break;
        }

        printc(min_con);
        use[min_con.first.first] = true;
        use[min_con.first.second] = true;

        list_nodes.erase(min_node);
        list_nodes[min_con.first.first];
        list_nodes[min_con.first.second];


        auto cons = adj[min_con.first.first];
        int index = -1;
        for (int i = 0;i < cons.size(); i ++) {
            connection con = cons[i];
            if (equal(con, min_con)) {
                index = i;
                break;
            }
        }
        cons.erase(cons.begin() + index);
        adj[min_con.first.first] = cons;

        cons = adj[min_con.first.second];
        index = -1;
        for (int i = 0; i  < cons.size(); i ++) {
            connection con = cons[i];
            if (equal(con, min_con)) {
                index = i;
                break;
            }
        }
        cons.erase(cons.begin() + index);
        adj[min_con.first.second] = cons;

        result.push_back(min_con);
    }
    return result;
}

int main(int argc, char **argv) {
    std::ifstream in("input.txt");
    std::ofstream out("output.txt");

    std::map<int, int> map;

    int bin, ex;
    in >> bin >> ex;

    list exist_cons;
    for (int i = 0; i < ex; i++){
        connection conn;
        in >> conn.first.first >> conn.first.second;
        conn.second = 0;
        exist_cons.push_back(conn);
    }
    list cons;
    while (in.peek() != EOF && !in.eof()) {
        connection conn;
        in >> conn.first.first >> conn.first.second >> conn.second;
        if (conn.first.first == 0) {
            break;
        }
        cons.push_back(conn);
    }

    list min_cons;
    int sum = 0;
    min_cons = prim(&exist_cons, &cons);
    out << "üõ£Ô∏èüöó–î–æ—Ä–æ–≥–∏: \n";
    for (auto con: min_cons) {
        sum += con.second;
        if (con.second > 0) {
            out<<con.first.first << "-" << con.first.second << " " << con.second << "\n";
        }
    }
    out << "\n";
    out << "üëç–°—É–º–º–∞: " << sum;
}
